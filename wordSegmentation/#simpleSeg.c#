#include <stdio.h>
#include <scws.h>
#include <md5.h>
#define SCWS_PREFIX     "/usr/local/scws"
#define PAGESIZE 1024
static const char *const usage = "\
Usage:\n\
    simpleSeg --demo                 # run the demo\n\
    simpleSeg --help                 # print help info of the package\n\
    simpleSeg --version              # print the version of the package\n\
    simpleSeg --fileall              # do segmentation on all files in \\news directory\n\
    simpleSeg --file <file_path>     # do segmentation on a file\n\
    simpleSeg --text <String>        # do segmentation on a string\n\
";


int readfile(char *file_name, char **strToReturn)
{

  char *buf = NULL, *tmp = NULL;
  size_t bufSiz = 0;
  char inputBuf[PAGESIZE];
  FILE *in;


  in = fopen(file_name, "r");
  if (in)
  {
    /**
     * Read a page at a time until reaching the end of the file
     */
    while (fgets(inputBuf, sizeof inputBuf, in) != NULL)
    {
      /**
       * Extend the dynamic buffer by the length of the string
       * in the input buffer
       */
      tmp = realloc(buf, bufSiz + strlen(inputBuf) + 1);
      if (tmp)
      {
        /**
         * Add to the contents of the dynamic buffer
         */
        buf = tmp;
        buf[bufSiz] = 0;
        strcat(buf, inputBuf);
        bufSiz += strlen(inputBuf) + 1;
      }
      else
      {
        printf("Unable to extend dynamic buffer: releasing allocated memory\n");
        free(buf);
        buf = NULL;
        break;
      }
    }

    if (feof(in))
      printf("Reached the end of input file %s\n", argv[1]);
    else if (ferror(in))
      :      printf("Error while reading input file %s\n", argv[1]);

    if (buf)
    {
      printf("File contents:\n%s\n", buf);
      printf("Read %lu characters from %s\n", 
       (unsigned long) strlen(buf), argv[1]);
    }

    free(buf);
    fclose(in);   
  }
  else
  {
    printf("Unable to open input file %s\n", argv[1]);
  }

  return 0;
}

main(int argc, char *argv[])
{
    char *text;
    
    char *demo  = "’¡Ê’Ãæ’±û’¼Ò’µ­’¼Ô’ÄÄ’½Ê’çî’Âæ’Ãæ28’Æü’ÅÅ’¡Ë’¹¿’Ãç’µÖ’°¹’°¹’¹¿’»ü’ÍÇ’º£’Å·˜½¦’´Ö’²ó’Øæ’³°’³¦’Èã’É¾’É½’¼¨’¹¿’Ãç’µÖ’¡¤’ÉÔ’Í×’µá’¼Ò’Ðò’ÅÔ’ãë’ºß’²È>’Ö¤’³Ñ’ÅÙ’´Ç’ÂÔ’Á´’°Æ’¡¤’Ã¢”ÎÙ’Ç½’ñó’ÎÊ’Èï’³²’¿Í’²È’Ö¤’¿´’¾ð’¡¤’µë’Â¿’óÚ’¶õ’´Ö’¡£";
    if (argc == 2) {
	if (!strcmp(argv[1], "--demo")) {
	    printf("demo\n\n");
 	    text = demo;	    

        } else if(!strcmp(argv[1], "--version")) {
	    printf("version 0.1\n\n");
	}else if(!strcmp(argv[1], "--fileall")) {
	/*	for
		readfile();
        */  
	  printf("fileall\n\n");
        }else if(!strcmp(argv[1], "--help")){
		puts(usage);
		return;
	}else{
		puts(usage);
		return;
	}
    } else if (argc == 3) {
	if (!strcmp(argv[1], "--file")){
	    printf("\nFile: %s\n\n",argv[2]);
	     readfile(argv[2],&text);
		printf("File read end\n");
		printf("in main: %s\n",text);
        }else if(!strcmp(argv[1], "--text")) {
	    printf("text: %s\n\n",argv[2]);
	    text = argv[2];
	}else{
		puts(usage);
		return;
	}
	
    }else {
	puts(usage);
	return;
	}



  scws_t s;
  scws_res_t res, cur;
  
  if (!(s = scws_new())) {
    printf("ERROR: cann't init the scws!\n");
    exit(-1);
  }
  scws_set_charset(s, "utf8");
  scws_set_dict(s, "/usr/local/scws/etc/dict_cht.utf8.xdb", SCWS_XDICT_XDB); //traditional Chinese
  scws_set_rule(s, "/usr/local/scws/etc/rules_cht.utf8.ini");
  scws_set_ignore(s, 1); //set ignore punctuation

  scws_send_text(s, text, strlen(text));

  scws_top_t topres, topcur; 
  topres = topcur = scws_get_tops(s,50,"an,j,n,nr,ns,nt,nz,Ng,s,vn");
       
  md5_state_t state; 
  md5_byte_t digest[16];
  char hex_output[16*2 + 1];
  int di;  


    while (topcur != NULL)
    {
      printf("WORD: %s  weight:%f  time:%d  attr:%s \n", 
	topcur->word, topcur->weight, topcur->times, topcur->attr);

  //      md5_state_t state;
  //      md5_byte_t digest[16];
  //      char hex_output[16*2 + 1];
  //      int di;

        md5_init(&state);
        md5_append(&state, (const md5_byte_t *)(topcur->word), strlen(topcur->word));
        md5_finish(&state, digest);
        for (di = 0; di < 16; ++di){
            sprintf(hex_output + di * 2, "%02x", digest[di]);

        }
	printf("MD5 of the word is: %s\n",hex_output);	
      topcur = topcur->next;
    }
    scws_free_tops(topres);
  
printf("\n=============================================================\n");  

  while (res = cur = scws_get_result(s))
  {
    while (cur != NULL)
    {
      printf("WORD: %.*s/%s (IDF = %4.2f)\n", cur->len, text+cur->off, cur->attr, cur->idf);
      cur = cur->next;
    }
    scws_free_result(res);
  }
  scws_free(s);
}
